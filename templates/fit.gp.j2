# specific to fitting
# range is specified in settings.gp.j2

# symbol to mark significant p values
symbol = "\\ast"

# label font
lf_ = ',6'
xpos = .055
ypos = .9
d = .11

{% if plot_measure == 'cdf' %}
xpos = .61
ypos = .89
# BOX
{% endif %}

{% if datainfo.title == 'hobbit' and plot_measure == 'centralities' and measure_type != 'closeness' %}
ypos = .4
dx=.55
set label 1 "\\tiny {{ datainfo.title }}" at graph (xpos+dx),(ypos-0*d)  font ',6' front
{% else %}
dx=0
set label 1 "\\tiny {{ datainfo.title }}" at graph (xpos+dx),(ypos-0*d)  font ',6' front
{% endif %}

# BOX
set object 1 rect from graph (xpos-.2*d+dx),(ypos+.2*d) to graph (xpos+3.25*d+dx),(ypos-2.9*d) back

{% if plot_measure == 'cdf' %}
# relation symbol, significant and not significant
sigcmp = ">"
notsigcmp = "<"
set label 2 gprintf("\\tiny $\\hat{\\alpha}=%1.2f$", {{ datainfo.alpha }}) at graph (xpos+dx),(ypos-d) front
{% else %} # centralities
sigcmp = "\\ll"
notsigcmp = ">"
f(x) = {{ datainfo.slope }}*x + {{ datainfo.intercept }}
{% endif %}

pstr = ""
rstr = ""

{% if (plot_measure == 'cdf' and datainfo.pvalue < significance_level) or (plot_measure == 'centralities' and datainfo.pvalue > significance_level) %}
color = "\\color{gray}"
rstr = color
pstr = color."\\tiny $p".notsigcmp
pstr = gprintf(pstr."%1.2f$", {{ significance_level }})
{% else %}
pstr = "\\tiny $p".sigcmp
pstr = gprintf(pstr."%1.2f^*$", {{ significance_level }})
{% endif %}

{% if plot_measure == 'cdf' %}
set label 2 gprintf(rstr."\\tiny $\\alpha=%1.2f$", {{ datainfo.alpha }}) at graph (xpos+dx),(ypos-d) front
{% else %}
# write r value
set label 2 gprintf(rstr."\\tiny $r=%1.2f$", {{ datainfo.rvalue }}) at graph (xpos+dx),(ypos-d) front
{% endif %}



# change format to fit in the graph
#pstr = gprintf("\\tiny $p\\ll%1.2f".marksig, {{ significance_level }})

set label 3 pstr at graph (xpos+dx),(ypos-2*d) front

## PLOT
# ls 1 and ls 2 are set in settings.gp.j2
{% if plot_measure == 'cdf' %}
set for [i=1:5] linetype i dt i
## XMIN
# get y pair of xmin
xmin = {{ datainfo.coords_xmin.get('x') }}
y_xmin = {{ datainfo.coords_xmin.get('y') }}
unset arrow
unset object 2
# XMIN LABEL
if (xmin == 1) {
assign = sprintf("=%d", xmin)
} else {
set arrow from xmin, graph 0 to xmin, y_xmin nohead lt 2 lw 2 lc rgb 'black'
assign = ""
}
# XMIN LABEL DISPLACEMENT
if (xmin>5) {
deltax = -(xmin*.65)
} else {
deltax = .5
}
set label 4 sprintf("\\tiny $\\hat{x}_{min}%s$", assign) at (xmin+deltax),(.02) front
# THEORETICAL LINE
plot "{{ datainfo.filename }}" using 3:4 w l lt 2 lc rgb 'black' lw 3 notitle
set style line 1 lw 1 lc rgb 'black' ps 1 pt 6 pi 5
{% else %}
plot f(x) ls 2 notitle
{% endif %}
# EMPIRICAL DATA
plot "{{ datainfo.filename }}" using 1:2 ls 1 notitle
